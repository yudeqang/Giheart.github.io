<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fiddler抓包工具总结</title>
    <url>/Giheart.github.io/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们使用计算机上的浏览器或者客户端软件要与外界进行通信，就必然会有数据的发送或接收，有的时候，我们需要对这些传递的数据进行分析，就需要截获这些传递的数据，其中对这些数据进行截获、重发、编辑、转存的过程叫做抓包。在写爬虫的时候，抓包分析用得相对来说也是较多的，要进行抓包，可以通过一些常见的抓包软件来实现，Fiddler就是一种常见的比较好用的抓包软件。</p>
<p>在写爬虫的时候借助Fiddler能够帮你你模拟出最真实的浏览器请求。</p>
<h1 id="什么是Fiddler"><a href="#什么是Fiddler" class="headerlink" title="什么是Fiddler"></a>什么是Fiddler</h1><p>Fiddler是一种常见的抓包分析软件，同时，我们可以利用Fiddler详细的对HTTP请求进行分析，并模拟对应的HTTP请求。<br>目前抓包软件有很多，除了Fiddler之外，常见的还有：  </p>
<ol>
<li>浏览器自带的调试工具，按f12可以调出。缺点：比较轻量，不能支持一些复杂的抓包。</li>
<li>Wireshark，这是一款通用的抓包工具，功能比较齐全，正因为功能比较齐全，所以较为庞大，而我们写爬虫的时候主要是分析HTTP请求，所以这款软件的很多功能用不到。</li>
</ol>
<h1 id="爬虫和Fiddler的关系"><a href="#爬虫和Fiddler的关系" class="headerlink" title="爬虫和Fiddler的关系"></a>爬虫和Fiddler的关系</h1><p>​    网络爬虫是自动爬取网页的程序，在爬取的过程中必然涉及客户端与服务端之间的通信，自然也需要发送一些HTTP请求，并接受服务器返回的结果。在一些复杂的网络请求中，我们很难看到网址的变化规律，这就很难手动构造来请求来自动爬取网页了。</p>
<p>​    比如在浏览一些网页是，浏览到最下面的时候会出现一个‘’加载更多“的字样，此时点击就会加载出更多内容，然而我们观察浏览器中的网站并没有变化，便也无法分析出浏览器向服务器发送了什么数据。</p>
<p>​    此时可以使用Fiddler进行抓包，并对这些数据进行分析，这样就可以分析出实现”加载更多“的请求了。</p>
<h1 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h1><p><a href="https://www.telerik.com/download/fiddler">Fiddler下载地址</a>从官网下载完成后安装，安装完成后打开</p>
<h2 id="字段说明"><a href="#字段说明" class="headerlink" title="字段说明"></a>字段说明</h2><p>Fiddler想要抓到数据包，要确保Capture Traffic是开启，在File –&gt; Capture Traffic。开启后再左下角会有显示，当然也可以直接点击左下角的图标来关闭/开启抓包功能。<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234157312-154346340.png" alt=""><br>Fiddler开始工作了，抓到的数据包就会显示在列表里面，下面总结了这些都是什么意思：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234158609-143657944.png" alt=""><br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/Fiddler抓包工具总结/1.png" alt=""><br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/Fiddler抓包工具总结/2.png" alt=""><br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/Fiddler抓包工具总结/3.png" alt=""></p>
<h2 id="Statistics-请求的性能数据分析"><a href="#Statistics-请求的性能数据分析" class="headerlink" title="Statistics 请求的性能数据分析"></a>Statistics 请求的性能数据分析</h2><p>随意点击一个请求，就可以看到Statistics关于HTTP请求的性能以及数据分析了<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234218890-2133347180.png" alt=""></p>
<p>##　Inspectors 查看数据内容<br>Inspectors是用于查看会话的内容，上半部分是请求的内容，下半部分是响应的内容：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120130545953-2034481316.png" alt=""></p>
<p>##　AutoResponder 允许拦截指定规则的请求<br>AutoResponder允许你拦截指定规则的求情，并返回本地资源或Fiddler资源，从而代替服务器响应。</p>
<p>看下图5步，我将“baidu”这个关键字与我电脑“f:\Users\YukiO\Pictures\boy.jpeg”这张图片绑定了，点击Save保存后勾选Enable rules，再访问baidu，就会被劫持。<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234219765-703426619.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234224843-907043204.png" alt=""><br>AutoResponder有很多匹配规则：　</p>
<ol>
<li>字符串匹配（默认）：只要包含指定字符串（不区分大小写），全部认为是匹配<br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/Fiddler抓包工具总结/4.png" alt=""></li>
<li>正则表达式匹配：以“regex:”开头，使用正则表达式来匹配，这个是区分大小写的<br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/Fiddler抓包工具总结/5.png" alt=""><h2 id="Composer-自定义请求发送服务器"><a href="#Composer-自定义请求发送服务器" class="headerlink" title="Composer 自定义请求发送服务器"></a>Composer 自定义请求发送服务器</h2>Composer允许自定义请求发送到服务器，可以手动创建一个新的请求，也可以在会话表中，拖拽一个现有的请求<br>Parsed模式下你只需要提供简单的URLS地址即可（如下图，也可以在RequestBody定制一些属性，如模拟浏览器User-Agent）<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234227062-846408602.png" alt=""><h2 id="Filters-请求过滤规则"><a href="#Filters-请求过滤规则" class="headerlink" title="Filters 请求过滤规则"></a>Filters 请求过滤规则</h2>Fiters 是过滤请求用的，左边的窗口不断的更新，当你想看你系统的请求的时候，你刷新一下浏览器，一大片不知道哪来请求，看着碍眼，它还一直刷新你的屏幕。这个时候通过过滤规则来过滤掉那些不想看到的请求。<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125401968-22426265.png" alt=""><br>勾选左上角的Use Filters开启过滤器，这里有两个最常用的过滤条件：Zone和Host</li>
<li>Zone 指定只显示内网（Intranet）或互联网（Internet）的内容：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118235316718-1553324600.png" alt=""></li>
<li>Host 指定显示某个域名下的会话：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118235317328-711964625.png" alt=""><br>如果框框为黄色（如图），表示修改未生效，点击红圈里的文字即可<h2 id="Timeline-请求响应时间"><a href="#Timeline-请求响应时间" class="headerlink" title="Timeline 请求响应时间"></a>Timeline 请求响应时间</h2>在左侧会话窗口点击一个或多个（同时按下 Ctrl 键），Timeline 便会显示指定内容从服务端传输到客户端的时间：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118235318172-1052872585.png" alt=""><h1 id="Fiddler-设置解密HTTPS的网络数据"><a href="#Fiddler-设置解密HTTPS的网络数据" class="headerlink" title="Fiddler 设置解密HTTPS的网络数据"></a>Fiddler 设置解密HTTPS的网络数据</h1>Fiddler可以通过伪造CA证书来欺骗浏览器和服务器。Fiddler是个很会装逼的好东西，大概原理就是在浏览器面前Fiddler伪装成一个HTTPS服务器，而在真正的HTTPS服务器面前Fiddler又装成浏览器，从而实现解密HTTPS数据包的目的。</li>
</ol>
<p>解密HTTPS需要手动开启，依次点击：</p>
<ol>
<li>Tools –&gt; Fiddler Options –&gt;  HTTPS<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234228140-2037050814.png" alt=""></li>
<li>勾选Decrypt HTTPS Traffic<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234229250-1993071078.png" alt=""></li>
<li>点击OK<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160118234230343-471116797.png" alt=""><h1 id="Fiddler-抓取Iphone-Android数据包"><a href="#Fiddler-抓取Iphone-Android数据包" class="headerlink" title="Fiddler 抓取Iphone / Android数据包"></a>Fiddler 抓取Iphone / Android数据包</h1><a href="https://forali.club/2018/10/23/%E4%BD%BF%E7%94%A8Fiddler%E5%AF%B9%E6%89%8B%E6%9C%BAAPP%E6%8A%93%E5%8C%85/">请参考我的另一篇博客</a></li>
</ol>
<h1 id="Fiddler-内置命令与断点"><a href="#Fiddler-内置命令与断点" class="headerlink" title="Fiddler 内置命令与断点"></a>Fiddler 内置命令与断点</h1><p>Fiddler还有一个藏的很深的命令框，平时用的时候很容易忽略<br>FIddler断点功能就是将请求截获下来，但是不发送，这个时候你可以干很多事情，比如说，把包改了，再发送给服务器君。还有balabala一大堆的事情可以做，就不举例子了。<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125408672-279510487.png" alt=""><br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/(Fiddler抓包工具总结/6.png" alt=""><br><img src="/2018/10/24/Fiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/(Fiddler抓包工具总结/7.png" alt=""><br>示例：<br>?<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125409703-1678932502.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125414093-255856593.png" alt=""><br>&lt;<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125414797-2077867027.png" alt=""><br>=<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125415547-1825599853.png" alt=""><br>@<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125416093-439467539.png" alt=""><br>select<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125417734-817450905.png" alt=""><br>cls<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125418343-1404670131.png" alt=""><br>dump<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125418906-1712835498.png" alt=""></p>
<h2 id="断点命令"><a href="#断点命令" class="headerlink" title="断点命令"></a>断点命令</h2><p>断点可以直接点击Fiddler下图的图标位置，就可以设置全部请求的断点，断点的命令可以精确设置需要截获那些请求。如下示例：<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125424047-1175695668.png" alt=""><br>命令：<br>bpafter<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125424797-1724110564.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125425984-995334279.png" alt=""><br>bps<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125426687-1642870815.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125430750-1560884194.png" alt=""><br>bpv<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125431687-881357645.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125433422-1492238172.png" alt=""><br>g / go<br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125437359-2010010315.png" alt=""><br><img src="https://images2015.cnblogs.com/blog/626593/201601/626593-20160120125438093-1008328282.png" alt=""></p>
<hr>
<p>本篇博客借鉴了：<a href="https://www.cnblogs.com/yyhh/p/5140852.html">链接</a>图片也来自：<a href="https://www.cnblogs.com/yyhh/p/5140852.html">链接</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Go学习笔记1</title>
    <url>/Giheart.github.io/2019/10/11/Go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<p>1.官网可下载windows一键安装程序</p>
<p>2.GOPATH目录约定有三个子目录src存放源代码(比如：.go .c .h .s等)   按照golang默认约定，go run，go install等命令的当前工作路径（即在此路径下执行上述命令）。pkg编译时生成的中间文件（比如：.a）　　golang编译包时bin编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个gopath，那么使用{GOPATH//://bin:}/bin添加所有的bin目录）</p>
<p>3.Go程序的基本结构和要素包的概念、导入与可见性包是结构化代码的一种方式：每个程序都由包(通常称为pkg的概念组成)，可以使用自身的包或者从其它包中导入内容。每个Go文件都属于且仅属于一个包。一个包可以由许多以.go为扩展名的源文件组成，你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个Go应用程序都包含一个名为main的包。所有的包名都应该使用小写字母。标准库：在Go的安装文件里包含了一些可以直接使用的包，即标准库。在windows下，标准库的位置在go/pkg/windows_386中；在 Linux 下，标准库在 Go 根目录下的子目录 pkg\linux_amd64 中（如果是安装的是 32 位，则在 linux_386 目录中）。一般情况下，标准包会存放在$GOROOT/pkg/$GOOS_$GOARCH/ 目录下。Go的标准库包含了大量的包，如fmt和os，但是你也可以创建自己的包。如果想要创建一个程序，则包和包内的文件都必须以正确的顺序进行编译。包的依赖关系决定了其构建顺序。属于同一个包的源文件必须全部被遗弃编译，一个包即是编译时的一个单元，因此根据惯例，每个目录都只包含一个包。</p>
<p>可见性规则：当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需先导入这个包），这被称为导出；标识符如果以小写字母开头，则包对外是不可兼得，但是他们在整个包的内部是可见并且可用的。因此，在导入一个外部包后，能够且只能够访问该包中导出的对象。</p>
<p>值类型和引用类型程序中所用到的内存在计算机中使用一堆箱子来表示，这些箱子被称为“字”。根据不同的处理器以及操作系统类型，所有的字都具有32位（4字节）或64位（8字节）的相同长度；所有的字都使用相关的内存地址来进行表示。所有像int、float、bool和string这些基本类型都属于值类型，使用这些类型的变量直接指向存在内存中的值：</p>
<p>另外，想数组和结构这些复合类型也是值类型。当使用等号将一个变量的值赋给另一个变量时，如j=i，实际上是在内存中将i的值进行了拷贝。更复杂的数据通常会需要使用多个字，这些数据一般使用引用类型保存。一个引用类型的变量r1存储的是r1的值所在的内存地址，或内存地址中第一个字所在的位置。这个内存地址被称之为指针，这个指针实际上也被存在另外的某一个字中。同一个引用类型的指针指向的多个字可以是在连续的内存地址中，这也是计算效率最高的一种存储方式；也可以将这些字分散存放在内存中，每个字都指示了下一个字所在的内存地址。当使用赋值语句r2=r1是，只有引用地址被复制。如果r1的值被改变了，那么这个值的所有引用都会指向被修改后的内容，在这个例子中，r2也会受到影响。在Go语言中，指针属于引用类型，其他的引用类型还包括slices，maps和channel。被引用的变量会被存储在堆中，以便进行垃圾回收，且比栈拥有更大的内存空间。</p>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL使用记录</title>
    <url>/Giheart.github.io/2018/11/12/MySQL%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前已经讲过MySQL的安装，这篇文章主要记录我在使用MySQL时遇到的各种问题和解决方法。</p>
<h1 id="可视化工具的使用"><a href="#可视化工具的使用" class="headerlink" title="可视化工具的使用"></a>可视化工具的使用</h1><p>Navicat for MySQL是一套管理和开发MySQL的工具，实现了数据库可视化操作，对于新手来说安装一个可视化工具对于学习数据库有很大帮助。</p>
<p>Navicat for MySQL中文版，使用起来很方便。缺点就是这个软件收费，在网上看了一下正版1500；但是，早已经有人破解了这个软件。网上破解的方法有很多，我在这里就介绍一个最简单的方法：</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>链接：<a href="https://pan.baidu.com/s/1-6htt3CDzVlEIsurq8_fRw">https://pan.baidu.com/s/1-6htt3CDzVlEIsurq8_fRw</a><br>提取码：l6ho<br>使用百度网盘下载上面文件，这里包含了Navicat安装包和破解程序，安装完成Navicat后运行PatchNavicat.exe选择navicat.exe<img src="https://i.loli.net/2018/11/12/5be9376b995e8.png" alt=""> </p>
<p>打开后破解就完成了。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装完成后按照下图连接自己的MySQL</p>
<p><img src="https://i.loli.net/2018/11/12/5be9385b2eafa.png" alt=""> </p>
<p>设置好了之后右键刚才新建的连接，然后点击打开连接。</p>
<p>我在做到这一步时出现了错误1251，大致是说不支持什么什么的，然后上网上查了一下，很快找到了解决方法：</p>
<p>在cmd登录到mysql然后执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39; PASSWORD EXPIRE NEVER; #修改加密规则 </span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;; #更新一下用户的密码 </span><br><span class="line">FLUSH PRIVILEGES; #刷新权限 </span><br></pre></td></tr></table></figure>
<p>password可以修改成任意密码</p>
<p>还有一点要注意的是，在mysql命令行下，这些命令都要以;号结尾。</p>
<p>完成了之后再去Navicat打开连接就可以了</p>
<p><img src="https://i.loli.net/2018/11/12/5be93ab32182e.png" alt=""> </p>
<h1 id="python连接mysql"><a href="#python连接mysql" class="headerlink" title="python连接mysql"></a>python连接mysql</h1><p>使用python连接mysql要首先下载mysql驱动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></table></figure>
<p>然后引入驱动操作mysql吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">__autor__ = <span class="string">&#x27;ym&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line">conn = mysql.connector.connect(user=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;password&#x27;</span>, database=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;CREATE TABLE student(id VARCHAR (20)PRIMARY KEY ,NAME VARCHAR (20))&#x27;</span>)</span><br><span class="line">cursor.execute(<span class="string">&quot;INSERT INTO test1 (id,name) VALUES (&#x27;1&#x27;, &#x27;小绿&#x27;)&quot;</span>)</span><br><span class="line">cursor.execute(<span class="string">&quot;UPDATE student SET NAME=&#x27;大蓝&#x27; WHERE (id=&#x27;1&#x27;)&quot;</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">cursor.close()</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，首先引入驱动</p>
<p>然后创建了连接</p>
<p>再创建了cursor</p>
<p>再执行SQL语句</p>
<p>然后和操作sqlite一样，提交事物，关闭游标。</p>
<hr>
<p>（mysql语法需要多加练习，初次使用，报了很多错误。。。。准备下次专门写一篇记录mysql语法的文章。）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用笔记</title>
    <url>/Giheart.github.io/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="创建新文件"><a href="#创建新文件" class="headerlink" title="创建新文件"></a>创建新文件</h2><p>在D:/个人博客/BLOG/source/_posts文件夹下执行命令<br>hexo new ‘新文件名字’<br><img src="/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo使用笔记/hexo1.png" alt="新建文件">  </p>
<h2 id="在文本中添加图片"><a href="#在文本中添加图片" class="headerlink" title="在文本中添加图片"></a>在文本中添加图片</h2><ol>
<li>把主页配置文件_config.yml里的post_asset_folder:这个选项设置为true(如过以后不想生成同名的文件夹了改为false即可)</li>
<li>在hexo目录下执行npm install hexo-asset-image –save,这是下载安装上传本地图片的插件。</li>
<li>等待安装完成后，再运行上面创建新文件的命令来生成新md文件时，/source/_posts文件夹中除了xxx.md文件还有一个同名的文件夹。</li>
<li>最后在xxx.md中想引入图片时，先把图片复制到这个文件夹中，然后只需要在xxx.md中按照markdown的格式引入图片：<br><img src="/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo使用笔记/hexo2.png" alt="插入图片"><br>ps:!后面没有空格，hexo使用笔记前可加/也可以不加，图片名字一定不要写错。<h2 id="在页面中添加超链接"><a href="#在页面中添加超链接" class="headerlink" title="在页面中添加超链接"></a>在页面中添加超链接</h2><img src="/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo使用笔记/hexo3.png" alt="添加链接"><h2 id="关于文章推送的问题"><a href="#关于文章推送的问题" class="headerlink" title="关于文章推送的问题"></a>关于文章推送的问题</h2>之前由于不会弄，导致每次推送时都把git上面的CNAME文件弄丢了，每次推送完之后还要重新创建CNAME文件，这样很麻烦。通过查阅资料知道了把CNAME文件放在本地hexo目录下source的_posts文件夹下就可以解决这个问题了。<h2 id="关于云解析"><a href="#关于云解析" class="headerlink" title="关于云解析"></a>关于云解析</h2>首先要有一个域名，我用的是腾讯云域名：<br><img src="/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo使用笔记/云解析.png" alt="域名解析"><br>www和@主机记录的记录值是自己的githubpage的地址<br>然后本地文件中要有一个CNAME文件，这个文件只有一行：<br><img src="/2018/10/17/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/hexo使用笔记/cname.png" alt="CNAME"><br>这样就行了</li>
</ol>
<hr>
<p>原创文章，转载请注明出处！</p>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>new test</title>
    <url>/Giheart.github.io/2021/02/20/new-test/</url>
    <content><![CDATA[<p>我又回来了!</p>
]]></content>
      <tags>
        <tag>new</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Fiddler对手机APP抓包</title>
    <url>/Giheart.github.io/2018/10/23/%E4%BD%BF%E7%94%A8Fiddler%E5%AF%B9%E6%89%8B%E6%9C%BAAPP%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2018/05/18/15/30/webdesign-3411373__340.jpg" alt=""></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Fiddler是一款抓包工具，具有很强大的功能，使用Fiddler不仅可以轻松抓取电脑端的数据包，还可以抓取手机、ipad的数据包。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在<a href="https://www.telerik.com/fiddler">Fiddler官网</a>下载并安装Fiddler，安装后打开界面如下：</p>
<p><img src="https://i.loli.net/2018/10/23/5bcec950edf17.png" alt=""> </p>
<p>因为fiddler抓包的原理就是通过代理，所以被测终端需要和安装fiddler的电脑在同一个局域网中。  </p>
<p>开启Fiddler的远程连接，Fiddler 主菜单 Tools -&gt; Fiddler Options…-&gt; Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：</p>
<p><img src="https://i.loli.net/2018/10/23/5bcec9fa6e914.png" alt=""> </p>
<p>接下来要做的就是手机端的设置啦：  </p>
<p>手机和电脑必须在同一个局域网内，然后打开wifi，进行以下设置： </p>
<p><img src="https://i.loli.net/2018/10/23/5bceca9f8eb4a.png" alt=""> </p>
<p>代理服务器主机名就是电脑ip，端口就是Fiddler监听端口8888  </p>
<p>然后在手机上点击任意app就可以看到有请求在Fiddler上面流动了</p>
<p><img src="https://i.loli.net/2018/10/23/5bceccb36efef.png" alt=""> </p>
<p>Fiddler的强大不止于此，Fiddler还能做很多事情，目前还在学习中。</p>
<hr>
<p>原创文章，转载请注明出处！</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式的使用</title>
    <url>/Giheart.github.io/2018/12/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>正则表达式在爬虫中被广泛使用，正则和Xpath各有各的优点。虽然以前学习过正则表达式，但现在还总是迷迷糊糊的，今天有所顿悟。</p>
<h2 id="re-search-和re-match"><a href="#re-search-和re-match" class="headerlink" title="re.search()和re.match()"></a>re.search()和re.match()</h2><p>re.match决定RE是否在字符串刚开始的位置匹配。//注：这个方法并不是完全匹配。当pattern结束时若string还有剩余字符，仍然视为成功。想要完全匹配，可以在表达式末尾加上边界匹配符’$’</p>
<p>re.search函数会在字符串内查找模式匹配,只要找到第一个匹配然后返回，如果字符串没有匹配，则返回None。</p>
<p>match和search一旦匹配成功，就是一个match object对象，而match object对象有以下方法：</p>
<ul>
<li>group() 返回被RE匹配的字符串</li>
<li>start() 返回匹配开始的位置编号</li>
<li>end() 返回匹配结束的位置编号</li>
<li>span() 返回一个元组包含匹配（开始，结束）的位置编号</li>
<li>group() 返回re整体匹配的字符串，可以一次输入多个组号，对应组号匹配的字符串</li>
</ul>
<p>re.search()后使用group()不加参数表示返回被匹配的整体字符串，group()加上一个参数1表示取出匹配的第一组字符，可以输入多个组号。</p>
<p>eg.:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">str1 = <span class="string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;你好世界&lt;/h1&gt;&#x27;</span></span><br><span class="line">x = re.search(<span class="string">&#x27;&lt;h1&gt;(.*?)&lt;/h1&gt;(.*?)&lt;/h1&gt;&#x27;</span>, str1).group(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line">结果：(<span class="string">&#x27;hello world&#x27;</span>, <span class="string">&#x27;你好世界&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="re-compile和re-findall"><a href="#re-compile和re-findall" class="headerlink" title="re.compile和re.findall"></a>re.compile和re.findall</h2><p>re.compile是对正则表达式进行预编译，返回一个对象的模式，主要作用是把常用的正则表达式编译成正则表达式对象，这样可以提高一点效率。</p>
<p>格式：<code>re.compile(pattern,flags=0)</code></p>
<p>pattern：编译时用的表达式字符串</p>
<p>flags：编译标志位，用于修改正则表达式的匹配方式，模式修正符。</p>
<p>常用的flags模式修正符有：</p>
<ul>
<li>re.S：使.匹配包括换行符在内的所有字符</li>
<li>re.I：使匹配不区分大小写</li>
<li>re.L：做本地化识别匹配</li>
<li>re.M：多行匹配，影响^和$</li>
<li>re.X：该标志通过给予更灵活的格式一遍将正则表达式写的更易于理解</li>
<li>re.U：根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</li>
</ul>
<p>re.findall遍历匹配，可以获取字符串中所有匹配的字符串，返回一个列表。</p>
<p>格式：re.findall(pattern, string, flags=0)</p>
<p>pattern为表达式字符串，</p>
<p>strings为要匹配的字符串</p>
<p>flags为模式修正符</p>
<p>所以可以看到：</p>
<p>在findall中包含了compile，为了简洁，一般我都不适用compile。</p>
<h2 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a>re.finditer</h2><p>re.finditer() 搜索string，返回一个顺序访问每一个匹配结果（Match对象）的迭代器。找到 RE 匹配的所有子串，并把它们作为一个迭代器返回。</p>
<p>格式和findall()一样，返回的是一个迭代器，要使用for循环迭代取值，由于他返回的是一个Match对象，所以还要使用.group()函数来取出字符串。</p>
<h2 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h2><p>按照能够匹配的子串将string分割后返回列表。</p>
<p>可以使用re.split来分割字符串，如：re.split(r’\s+’, text)；将字符串按空格分割成一个单词列表。</p>
<p>格式：</p>
<p>re.split(pattern, string[, maxsplit])</p>
<p>maxsplit用于指定最大分割次数，不指定将全部分割。</p>
<p>eg.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(re.split(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;one1two2three3four4five5&#x27;</span>))</span><br><span class="line">执行结果如下：</span><br><span class="line">[<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="re-sup"><a href="#re-sup" class="headerlink" title="re.sup"></a>re.sup</h2><p>re.sup使用re替换string中每一个匹配的子串后返回替换后的字符串。</p>
<p>eg.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">re.sup(&#39;[\n ]&#39;, &#39;&#39;, str)</span><br></pre></td></tr></table></figure>
<p>上面这个例子会吧str中所有的换行符和空格去除。</p>
<h2 id="一些要注意的地方"><a href="#一些要注意的地方" class="headerlink" title="一些要注意的地方"></a>一些要注意的地方</h2><p><strong>re.match与re.search与re.findall的区别：</strong></p>
<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=re.search(<span class="string">&#x27;[\d]&#x27;</span>,<span class="string">&quot;abc33&quot;</span>).group()</span><br><span class="line">print(a)</span><br><span class="line">p=re.match(<span class="string">&#x27;[\d]&#x27;</span>,<span class="string">&quot;abc33&quot;</span>)</span><br><span class="line">print(p)</span><br><span class="line">b=re.findall(<span class="string">&#x27;[\d]&#x27;</span>,<span class="string">&quot;abc33&quot;</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="literal">None</span></span><br><span class="line">[<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><strong>贪婪匹配与非贪婪匹配</strong></p>
<p><em>?,+?,??,{m,n}?    前面的</em>,+,?等都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.findall(<span class="string">r&quot;a(\d+?)&quot;</span>,<span class="string">&#x27;a23b&#x27;</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = re.findall(<span class="string">r&quot;a(\d+)&quot;</span>,<span class="string">&#x27;a23b&#x27;</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line">[<span class="string">&#x27;2&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;23&#x27;</span>]</span><br><span class="line"></span><br><span class="line">a = re.match(<span class="string">&#x27;&lt;(.*)&gt;&#x27;</span>,<span class="string">&#x27;&lt;H1&gt;title&lt;H1&gt;&#x27;</span>).group()</span><br><span class="line">print(a)</span><br><span class="line">b = re.match(<span class="string">&#x27;&lt;(.*?)&gt;&#x27;</span>,<span class="string">&#x27;&lt;H1&gt;title&lt;H1&gt;&#x27;</span>).group()</span><br><span class="line">print(b)</span><br><span class="line">执行结果：</span><br><span class="line">&lt;H1&gt;title&lt;H1&gt;</span><br><span class="line">&lt;H1&gt;</span><br><span class="line"></span><br><span class="line">a = re.findall(<span class="string">r&quot;a(\d+)b&quot;</span>,<span class="string">&#x27;a3333b&#x27;</span>)</span><br><span class="line">print(a)</span><br><span class="line">b = re.findall(<span class="string">r&quot;a(\d+?)b&quot;</span>,<span class="string">&#x27;a3333b&#x27;</span>)</span><br><span class="line">print(b)</span><br><span class="line">执行结果如下：</span><br><span class="line">[<span class="string">&#x27;3333&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;3333&#x27;</span>]</span><br><span class="line"><span class="comment">#######################</span></span><br><span class="line">这里需要注意的是如果前后均有限定条件的时候，就不存在什么贪婪模式了，非匹配模式失效。</span><br></pre></td></tr></table></figure>
<p>本篇博客借鉴<a href="https://www.cnblogs.com/tina-python/p/5508402.html">CNBLOGS</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语法</title>
    <url>/Giheart.github.io/2018/11/12/SQL%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><p>对数据库进行操作，我们主要使用的是SQL语句。SQL语句包括最基本的增删改查和高级功能比如各种约束、高级查询等。</p>
<h1 id="创建数据库、表"><a href="#创建数据库、表" class="headerlink" title="创建数据库、表"></a>创建数据库、表</h1><p>CREATE DATABASE 数据库名    用来创建数据库</p>
<p>CREATE TABLE 表名(字段1 定义类型(长度),字段2 定义类型(长度))</p>
<p>eg.：创建学生库，学生表，有id和name两个字段，类型都为varchar，长度为20，id为主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE students</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students(id <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">PRIMARY</span> KEY,name <span class="type">VARCHAR</span>(<span class="number">20</span>))</span><br></pre></td></tr></table></figure>
<h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="查询语句："><a href="#查询语句：" class="headerlink" title="查询语句："></a>查询语句：</h2><p>SELECT  字段  FROM 表名</p>
<p>比如从学生表中查询所有学生信息：</p>
<p>SELECT * FROM students</p>
<p>在python中，查询语句执行完成后需要使用fetchall或者fetchone来接收这个查询结果，fetchall返回所有数据，fetchone返回一条数据。eg：</p>
<p>cursor.excute(“SELECT * FROM students”)</p>
<p>data = cursor.fetchall()</p>
<p>这两句话也可以合成一句话：</p>
<p>data = cursor.excute(‘SELECT * FROM students’).fetchall()</p>
<p>返回的数据类型是列表嵌套元组形式，可以通过下标访问取值。</p>
<h3 id="SQL-SELECT-DISTINCT"><a href="#SQL-SELECT-DISTINCT" class="headerlink" title="SQL SELECT DISTINCT"></a>SQL SELECT DISTINCT</h3><p>在表中，可能会包含重复值。有时，我们只需要列出不同的值。这是可以使用 SELECT DISTINCT语句。</p>
<p>eg：查询学生表中所有不同的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>
<h3 id="WHERE-语句"><a href="#WHERE-语句" class="headerlink" title="WHERE 语句"></a>WHERE 语句</h3><p>如果需要有条件的从表中选取数据，可将WHERE子句添加到SELECT语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br></pre></td></tr></table></figure>
<p>下面这些运算符可以在WHERE子句中使用。</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在某个范围内</td>
</tr>
<tr>
<td>LIKE</td>
<td>搜索某种模式</td>
</tr>
</tbody>
</table>
<p>注释：在某些版本的 SQL 中，操作符 &lt;&gt; 可以写为 !=。</p>
<p>eg：假如学生列表中有id、年龄、姓名和性别列。我们希望选择性别为男的所有行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure>
<p>eg:选择所有年龄&gt;10的学生</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> age<span class="operator">&gt;</span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>这里需要提醒一下：当字段值为数字型时，不要使用引号，是字符串是，要使用引号，尽量都使用单引号！和我们学习python的str和int规则一样。</p>
<h3 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND&amp;OR 运算符"></a>SQL AND&amp;OR 运算符</h3><p>AND和OR运算符用于一个以上的条件对记录进行过滤。</p>
<p>AND和OR可在WHERE子语句中把两个或多个条件结合起来。</p>
<p>如果第一个条件和第二个条件都成立，则AND运算符显示一条记录</p>
<p>如果第一个和第二个条件只要有一个城里，则OR运算符显示一条记录。</p>
<p>AND eg：选择id为1并且name为m4a1的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> name<span class="operator">=</span><span class="string">&#x27;m4a1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>OR eg：选择id为1或者name为m4a1的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> name<span class="operator">=</span><span class="string">&#x27;m4a1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>AND和OR也可以结合起来组成复杂的表达式：</p>
<p>eg：选择id为1或者name为m4a1并且age=10的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (id<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> name<span class="operator">=</span><span class="string">&#x27;m4a1&#x27;</span>)<span class="keyword">AND</span> age<span class="operator">=</span><span class="number">10</span></span><br></pre></td></tr></table></figure>
<h3 id="SQL-ORDER-BY-语句"><a href="#SQL-ORDER-BY-语句" class="headerlink" title="SQL ORDER BY 语句"></a>SQL ORDER BY 语句</h3><p>有时候我们需要对查询返回结果进行排序，在MongoDB中有sort方法，那么在SQL中使用什么呢？</p>
<p>答案是使用ORDER BY。</p>
<p>ORDER BY语句用于根据指定的列对结果进行排序，默认按照升序进行排序；如果希望按照降序排序，可以使用DESC关键字。</p>
<p>eg：查询所有学生行并以id顺序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> id</span><br><span class="line">#降序排列可以添加<span class="keyword">DESC</span>关键字</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><p>INSERT INTO 表名(列名1,列名2) VALUES(‘值1’,’值2’)</p>
<p>比如在学生列表中添加一条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,name) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;aK47&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改使用的是update语句：</p>
<p>UPDATE 表名 SET 列名 = 新值 WHERE 列名称 = 某值</p>
<p>列的概念：</p>
<p><img src="https://i.loli.net/2018/11/12/5be96e2140546.png" alt=""> </p>
<p>eg:将学生表中id为1的name改为m4a1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE students <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;m4a1&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">UPDATE students <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;scar&#x27;</span>,id<span class="operator">=</span><span class="number">2</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>#修改多列注意使用,号分割</span><br></pre></td></tr></table></figure>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>DELETE语句用于删除表中的行：</p>
<p>DELETE FROM 表名称 WHERE 列名称 = 值</p>
<p>eg:删除student表id为1的那一行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>删除所有行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> student</span><br><span class="line">#或者</span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure>
<h1 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h1><h2 id="SQL-Top"><a href="#SQL-Top" class="headerlink" title="SQL Top"></a>SQL Top</h2><p>TOP子句用于规定要返回的记录的数目。对于拥有很多条记录的大型表来说，TOP子句是非常有用的。</p>
<p>MySQL中的top语法:从学生表中返回10条信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>eg：从students表中选取前两条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">2</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>
<p>eg：从students表中选取50%的记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">50</span> <span class="keyword">PERCENT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students</span><br></pre></td></tr></table></figure>
<h2 id="SQL-LIKE"><a href="#SQL-LIKE" class="headerlink" title="SQL LIKE"></a>SQL LIKE</h2><p>LIKE操作符用于在WHERE字句中搜索列中的指定模式。有点像是使用正则筛选数据</p>
<p>eg：我们希望从学生表中选取name以X开始的人：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;X%&#x27;</span></span><br><span class="line">#<span class="operator">%</span>号用于定义通配符（模式中缺少的字母）</span><br></pre></td></tr></table></figure>
<p>eg：从学生表中选取name以X结尾的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> neme <span class="keyword">LIKE</span> <span class="string">&#x27;%X&#x27;</span></span><br></pre></td></tr></table></figure>
<p>eg：从学生表中选取name包含x的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%X%&#x27;</span></span><br></pre></td></tr></table></figure>
<p>eg:使用NOT关键字，可以从学生表中选择name不包含x的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%X%&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL通配符"><a href="#SQL通配符" class="headerlink" title="SQL通配符"></a>SQL通配符</h2><p>就像是正则表达式的匹配符，在搜索数据库中的数据时，SQL通配符可以替代一个或者多个字符。SQL通配符必须与LIKE运算符一起使用。</p>
<p>在SQL中，可以使用以下通配符：</p>
<table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%</td>
<td>替代一个或多个字符</td>
</tr>
<tr>
<td>_</td>
<td>仅替代一个字符</td>
</tr>
<tr>
<td>[charlist]</td>
<td>字符列中的任何单一字符</td>
</tr>
<tr>
<td>[^charlist]或者[!charlist]</td>
<td>不在字符列中的任何单一字符</td>
</tr>
</tbody>
</table>
<p>eg：从学生表中选择name以A或B或C开头的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;[ABC]%&#x27;</span></span><br></pre></td></tr></table></figure>
<p>eg：从学生表中选择name不以A或B或C开头的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;[!ABC]%&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-IN-操作符"><a href="#SQL-IN-操作符" class="headerlink" title="SQL IN 操作符"></a>SQL IN 操作符</h2><p>IN操作符允许我们在WHERE字句中规定多个值</p>
<p>语法：</p>
<p>SELECT * FROM 表名 WHERE 列名 IN (value1,value2,…)</p>
<p>eg:从students表中选取name为ak和m4的人</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> name <span class="keyword">IN</span> (<span class="string">&#x27;ak&#x27;</span>,<span class="string">&#x27;m4&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="SQL-BETWEEN-操作符"><a href="#SQL-BETWEEN-操作符" class="headerlink" title="SQL BETWEEN 操作符"></a>SQL BETWEEN 操作符</h2><p>BETWEEN 操作符在WHERE子句中使用，作用是选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。</p>
<p>语法：</p>
<p>SELECT * FROM 表名 WHERE 列名 BETWEEN value1 AND value2</p>
<p>eg：从students表中选择id介于5和10之间的人：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>注意：返回的结果包括5但不包括10</p>
<p>eg：如果要选择上面范围之外的人，可以使用NOT操作符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> id <span class="keyword">NOT</span> BETWENN <span class="number">5</span> <span class="keyword">AND</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-Alias（别名）"><a href="#SQL-Alias（别名）" class="headerlink" title="SQL Alias（别名）"></a>SQL Alias（别名）</h2><p>通过使用SQL，可以为列名称和表名称指定别名。</p>
<p>语法：表的别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">AS</span> 别名 </span><br></pre></td></tr></table></figure>
<p>列的别名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">AS</span> 别名 <span class="keyword">FROM</span> 表名</span><br></pre></td></tr></table></figure>
<h2 id="SQL-JOIN"><a href="#SQL-JOIN" class="headerlink" title="SQL JOIN"></a>SQL JOIN</h2><p>SQL join用于根据两个或多个表中的列之间的关系，从这些表中查询数据。</p>
<h3 id="join和key："><a href="#join和key：" class="headerlink" title="join和key："></a>join和key：</h3><p>有时为了得到完成的结果，我们需要从两个或更多的表中获取结果。我们就需要执行join。</p>
<p>数据库中的表可通过键将彼此联系起来。主键是一个列，在这个列中每一行都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。</p>
<p>请看 “Persons” 表：</p>
<table>
<thead>
<tr>
<th>Id_P</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>请注意，”Id_P” 列是 Persons 表中的的主键。这意味着没有两行能够拥有相同的 Id_P。即使两个人的姓名完全相同，Id_P 也可以区分他们。</p>
<p>接下来请看 “Orders” 表：</p>
<table>
<thead>
<tr>
<th>Id_O</th>
<th>OrderNo</th>
<th>Id_P</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>77895</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>44678</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>22456</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>24562</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>34764</td>
<td>65</td>
</tr>
</tbody>
</table>
<p>请注意，”Id_O” 列是 Orders 表中的的主键，同时，”Orders” 表中的 “Id_P” 列用于引用 “Persons” 表中的人，而无需使用他们的确切姓名。</p>
<p>请留意，”Id_P” 列把上面的两个表联系了起来。</p>
<h3 id="引用两个表："><a href="#引用两个表：" class="headerlink" title="引用两个表："></a>引用两个表：</h3><p>我们可以通过引用两个表的方式，从两个表中获取数据：</p>
<p>eg：上面两张表，加入person是客户表，order是订单表，我们需要查询哪个客户订购了什么：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.Lastname,Persons.FirstName,Orders.OrderNo <span class="keyword">FROM</span> Persons,Orders <span class="keyword">WHERE</span> Persons.ID_P <span class="operator">=</span> Orders.ID_P</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>OrderNo</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adams</td>
<td>John</td>
<td>22456</td>
</tr>
<tr>
<td>Adams</td>
<td>John</td>
<td>24562</td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>77895</td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>44678</td>
</tr>
</tbody>
</table>
<p>除了上面的方法，我们也可以使用关键字JOIN来从两个表中获取数据。</p>
<p>如果我们希望列出所有客户的订单，可以使用下面的语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.LastName,Persons.FirstName,Orders.OrderNo <span class="keyword">FROM</span> Persons <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders <span class="keyword">IN</span> Persons.ID_P <span class="keyword">ORDER</span> <span class="keyword">BY</span> Persons.LastName</span><br></pre></td></tr></table></figure>
<h3 id="不同的SQL-JOIN"><a href="#不同的SQL-JOIN" class="headerlink" title="不同的SQL JOIN:"></a>不同的SQL JOIN:</h3><p>除了我们在上面的例子中实用的INNER JOIN(内连接)，我们还可以使用其他几种链接。</p>
<p>下面列出了您可以使用的 JOIN 类型，以及它们之间的差异。</p>
<ul>
<li>JOIN: 如果表中有至少一个匹配，则返回行</li>
<li>LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行</li>
<li>RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行</li>
<li>FULL JOIN: 只要其中一个表中存在匹配，就返回行</li>
</ul>
<h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h3><p>在表中存在至少一个匹配时，INNER JOIN关键字返回行</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>，列名<span class="number">2</span> <span class="keyword">FROM</span> 表名<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表名<span class="number">2</span> <span class="keyword">ON</span> 表名<span class="number">1.</span>列名<span class="number">1</span><span class="operator">=</span>表名<span class="number">2.</span>列名<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>注释：INNER JOIN 和 JOIN 是相同的，SELECT 后面的列名可以是多个来自不同两张表的列名。</p>
<h3 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h3><p>LEFT JOIN 关键字会从左表（表1）那里返回所有航，即使在右表（表2）中没有匹配的行。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名<span class="number">1</span>，列名<span class="number">2</span> <span class="keyword">FROM</span> 表名<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 表名<span class="number">2</span> <span class="keyword">ON</span> 表名<span class="number">1.</span>列名<span class="number">1</span><span class="operator">=</span>表名<span class="number">2.</span>列名<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h3><p>RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。</p>
<p>语法和LEFT JOIN 等一样。</p>
<h3 id="FULL-JOIN"><a href="#FULL-JOIN" class="headerlink" title="FULL JOIN"></a>FULL JOIN</h3><p>只要某个表中存在匹配，FULL JOIN 关键字就会返回行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">JOIN</span> table_name2 </span><br><span class="line"><span class="keyword">ON</span> table_name1.column_name<span class="operator">=</span>table_name2.column_name</span><br></pre></td></tr></table></figure>
<p>注释：在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。</p>
<h2 id="SQL-UNION-和-UNION-ALL-操作符"><a href="#SQL-UNION-和-UNION-ALL-操作符" class="headerlink" title="SQL UNION 和 UNION ALL 操作符"></a>SQL UNION 和 UNION ALL 操作符</h2><p>SQL UNION操作符用于合并两个或多个SELECT语句的结果集。</p>
<p>请注意，UNION内部的SELECT语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条SELECT语句中的列的顺序必须相同。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p>
<p>SQL UNION ALL语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name2</span><br></pre></td></tr></table></figure>
<p>复习时请看：<a href="http://www.w3school.com.cn/sql/sql_union.asp">W3SCHOOL</a></p>
<h2 id="SELECT-INTO"><a href="#SELECT-INTO" class="headerlink" title="SELECT INTO"></a>SELECT INTO</h2><p>SELECT INTO 语句可用于创建表的备份文件。</p>
<p>SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。</p>
<p>SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。</p>
<p>语法：把所有列插入新表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> new_table_name[<span class="keyword">IN</span> externaldatabase] <span class="keyword">FROM</span> old_table_name</span><br></pre></td></tr></table></figure>
<p>或者只把希望的列插入新表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">INTO</span> new_table_name [<span class="keyword">IN</span> externaldatabase] </span><br><span class="line"><span class="keyword">FROM</span> old_tablename</span><br></pre></td></tr></table></figure>
<p>eg：制作Persons表的备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> Persons_copy <span class="keyword">FROM</span> Persons</span><br></pre></td></tr></table></figure>
<p>IN子句可以用于向另一个数据库表中拷贝表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">INTO</span> Persons <span class="keyword">IN</span> <span class="string">&#x27;backup.mdb&#x27;</span> <span class="keyword">FROM</span> </span><br></pre></td></tr></table></figure>
<p>如果我们希望拷贝某些列，可以在 SELECT 语句后列出这些域：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName,FirstName</span><br><span class="line"><span class="keyword">INTO</span> Persons_backup</span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br></pre></td></tr></table></figure>
<p>SQL SELECT INTO实例-带有WHERE子句</p>
<p>我们也可以添加 WHERE 子句。</p>
<p>下面的例子通过从 “Persons” 表中提取居住在 “Beijing” 的人的信息，创建了一个带有两个列的名为 “Persons_backup” 的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> LastName,Firstname</span><br><span class="line"><span class="keyword">INTO</span> Persons_backup</span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City<span class="operator">=</span><span class="string">&#x27;Beijing&#x27;</span></span><br></pre></td></tr></table></figure>
<p>SQL SELECT INTO 实例-被连接的表</p>
<p>从一个以上的白哦中选取数据也是可以做到的。</p>
<p>下面的例子会创建一个名为 “Persons_Order_Backup” 的新表，其中包含了从 Persons 和 Orders 两个表中取得的信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.LastName,Orders.OrderNo</span><br><span class="line"><span class="keyword">INTO</span> Persons_Order_Backup</span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Persons.Id_P<span class="operator">=</span>Orders.Id_P</span><br></pre></td></tr></table></figure>
<h2 id="SQL-CTEATE-DATABASE"><a href="#SQL-CTEATE-DATABASE" class="headerlink" title="SQL CTEATE DATABASE"></a>SQL CTEATE DATABASE</h2><p>CREATE DATABASE用于创建数据库。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名</span><br></pre></td></tr></table></figure>
<h2 id="SQL-CREATE-TABLE"><a href="#SQL-CREATE-TABLE" class="headerlink" title="SQL CREATE TABLE"></a>SQL CREATE TABLE</h2><p>CREATE TABLE 用于创建数据库中的表</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(字段<span class="number">1</span> 数据类型，字段<span class="number">2</span> 数据类型，字段<span class="number">3</span> 数据类型，...)</span><br></pre></td></tr></table></figure>
<p>数据类型（data_type）规定了列可容纳何种数据类型。下面的表格包含了SQL中最常用的数据类型：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>integer(size)int(size)smallint(size)tinyint(size)</td>
<td>仅容纳整数。在括号内规定数字的最大位数。</td>
</tr>
<tr>
<td>decimal(size,d)numeric(size,d)</td>
<td>容纳带有小数的数字。”size” 规定数字的最大位数。”d” 规定小数点右侧的最大位数。</td>
</tr>
<tr>
<td>char(size)</td>
<td>容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。在括号中规定字符串的长度。</td>
</tr>
<tr>
<td>varchar(size)</td>
<td>容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。在括号中规定字符串的最大长度。</td>
</tr>
<tr>
<td>date(yyyymmdd)</td>
<td>容纳日期。</td>
</tr>
</tbody>
</table>
<h2 id="SQL-约束"><a href="#SQL-约束" class="headerlink" title="SQL 约束"></a>SQL 约束</h2><p>约束用于限制加入表的数据的类型。</p>
<p>可以在创建表示规定约束（通过CREATE TABLE语句），或者在表创建之后通过（ALERT TABLE语句）</p>
<p>我们将主要探讨以下几种约束：</p>
<ul>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>PRIMARY KEY</li>
<li>FOREIGN KEY</li>
<li>CHECK</li>
<li>DEFAULT</li>
</ul>
<h3 id="NOT-NULL-非空约束"><a href="#NOT-NULL-非空约束" class="headerlink" title="NOT NULL(非空约束)"></a>NOT NULL(非空约束)</h3><p>NOT NULL 约束强制列不接受 NULL 值。</p>
<p>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。</p>
<p>eg：创建students表，有3个字段（id,name,sex）并且id，name添加非空约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students(id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,sex <span class="type">VARCHAR</span>(<span class="number">10</span>) )</span><br></pre></td></tr></table></figure>
<h3 id="UNIQUE-唯一约束"><a href="#UNIQUE-唯一约束" class="headerlink" title="UNIQUE(唯一约束)"></a>UNIQUE(唯一约束)</h3><p>UNIQUE约束唯一标识数据库中的每条记录。</p>
<p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证，PRIMARY KEY 拥有自动定义的UNIQUE约束。每张表只能有一个PRIMARY KEY约束，但可以有多个UNIQUE约束。</p>
<p>下面的 SQL 在 “Persons” 表创建时在 “Id_P” 列创建 UNIQUE 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> (Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (Id_P,LastName)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>当表已被创建时，如需在 “Id_P” 列创建 UNIQUE 约束，请使用下列 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (Id_P)</span><br></pre></td></tr></table></figure>
<p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (Id_P,LastName)</span><br></pre></td></tr></table></figure>
<p>如果需要撤销UNIQUE约束，使用下面的SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons <span class="keyword">DROP</span> INDEX 列名</span><br></pre></td></tr></table></figure>
<h3 id="SQL-PRIMARY-KEY-主键约束"><a href="#SQL-PRIMARY-KEY-主键约束" class="headerlink" title="SQL PRIMARY KEY (主键约束)"></a>SQL PRIMARY KEY (主键约束)</h3><p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</p>
<p>主键必须包含唯一的值。</p>
<p>主键列不能包含 NULL 值。</p>
<p>每个表都应该有一个主键，并且每个表只能有一个主键。</p>
<p>再创建表的时候定义主键约束eg：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> pk_PersonID <span class="keyword">PRIMARY</span> KEY (Id_P,LastName)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果在表已存在的情况下为 “Id_P” 列创建 PRIMARY KEY 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (Id_P)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID <span class="keyword">PRIMARY</span> KEY (Id_P,LastName)</span><br></pre></td></tr></table></figure>
<p>注释：如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p>
<p>如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY</span><br></pre></td></tr></table></figure>
<h3 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY(外键约束)"></a>FOREIGN KEY(外键约束)</h3><p>一个表中的FOREIGN KEY指向另一个表中的PRIMARY KEY。</p>
<p>让我们通过一个例子来解释外键。请看下面两个表：</p>
<p>“Persons” 表：</p>
<table>
<thead>
<tr>
<th>Id_P</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>“Orders” 表：</p>
<table>
<thead>
<tr>
<th>Id_O</th>
<th>OrderNo</th>
<th>Id_P</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>77895</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>44678</td>
<td>3</td>
</tr>
<tr>
<td>3</td>
<td>22456</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>24562</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>请注意，”Orders” 中的 “Id_P” 列指向 “Persons” 表中的 “Id_P” 列。</p>
<p>“Persons” 表中的 “Id_P” 列是 “Persons” 表中的 PRIMARY KEY。</p>
<p>“Orders” 表中的 “Id_P” 列是 “Orders” 表中的 FOREIGN KEY。</p>
<p>FOREIGN KEY 约束用于预防破坏表之间连接的动作。</p>
<p>FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>
<p>eg:下面的 SQL 在 “Orders” 表创建时为 “Id_P” 列创建 FOREIGN KEY：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">Id_O <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">OrderNo <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Id_P <span class="type">int</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Id_O),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Id_P) <span class="keyword">REFERENCES</span> Persons(Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>FOREIGN KEY (列名) REFERENCES 表名(列名)</p>
<p>一个表中的外键是指向另一个表中的主键。</p>
<p>如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">Id_O <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">OrderNo <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Id_P <span class="type">int</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (Id_O),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> KEY (Id_P)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(Id_P)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果在 “Orders” 表已存在的情况下为 “Id_P” 列创建 FOREIGN KEY 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (Id_P)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(Id_P)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (Id_P)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(Id_P)</span><br></pre></td></tr></table></figure>
<p>如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders <span class="keyword">DROP</span> FORENGN KEY fk_perOrders</span><br></pre></td></tr></table></figure>
<h3 id="CHECK-范围约束"><a href="#CHECK-范围约束" class="headerlink" title="CHECK(范围约束)"></a>CHECK(范围约束)</h3><p>CHECK约束用于限制列中的值的范围。</p>
<p>如果对单个列定义CHECK约束，那么该列只允许特定的值。</p>
<p>如果对一个表定义CHECK约束，那么此约束会在特定的乐众对值进行限制。</p>
<p>eg：下面的 SQL 在 “Persons” 表创建时为 “Id_P” 列创建 CHECK 约束。CHECK 约束规定 “Id_P” 列必须只包含大于 0 的整数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CHECK</span> (Id_P<span class="operator">&gt;</span><span class="number">0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (Id_P<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Sandnes&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果在表已存在的情况下为 “Id_P” 列创建 CHECK 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> (Id_P<span class="operator">&gt;</span><span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (Id_P<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> City<span class="operator">=</span><span class="string">&#x27;Sandnes&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>如需撤销 CHECK 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CHECK</span> chk_Person</span><br></pre></td></tr></table></figure>
<h3 id="DEFAULT-默认值约束"><a href="#DEFAULT-默认值约束" class="headerlink" title="DEFAULT(默认值约束)"></a>DEFAULT(默认值约束)</h3><p>DEFAULT 约束用于向列中插入默认值。</p>
<p>如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p>
<p>下面的 SQL 在 “Persons” 表创建时为 “City” 列创建 DEFAULT 约束：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;Sandnes&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">Id_O <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">OrderNo <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Id_P <span class="type">int</span>,</span><br><span class="line">OrderDate <span class="type">date</span> <span class="keyword">DEFAULT</span> GETDATE()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>如果在表已存在的情况下为 “City” 列创建 DEFAULT 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> City <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;SANDNES&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如需撤销 DEFAULT 约束，请使用下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure>
<h2 id="SQL-CREATE-INDEX-语句"><a href="#SQL-CREATE-INDEX-语句" class="headerlink" title="SQL CREATE INDEX 语句"></a>SQL CREATE INDEX 语句</h2><p>CREATE INDEX 语句用于在表中创建索引。在不读取整个表的情况下，索引使数据库应用程序可以更快的查找数据。</p>
<p>您可以在表中创建索引，以便更加快速高效地查询数据。</p>
<p>用户无法看到索引，它们只能被用来加速搜索/查询。</p>
<p>注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</p>
<p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name <span class="keyword">ON</span> table_name(column_name)</span><br></pre></td></tr></table></figure>
<p>注释：”column_name” 规定需要索引的列。</p>
<p>SQL CREATE UNIQUE INDEX 语法:</p>
<p>在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name)</span><br></pre></td></tr></table></figure>
<p>CREATE INDEX 实例</p>
<p>本例会创建一个简单的索引，名为 “PersonIndex”，在 Person 表的 LastName 列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName) </span><br></pre></td></tr></table></figure>
<p>如果您希望以<em>降序</em>索引某个列中的值，您可以在列名称之后添加保留字 <em>DESC</em>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName <span class="keyword">DESC</span>) </span><br></pre></td></tr></table></figure>
<p>假如您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName, FirstName)</span><br></pre></td></tr></table></figure>
<h2 id="SQL-撤销索引、表以及数据库"><a href="#SQL-撤销索引、表以及数据库" class="headerlink" title="SQL 撤销索引、表以及数据库"></a>SQL 撤销索引、表以及数据库</h2><p>通过使用DROP语句，可以轻松地删除索引、表和数据库。</p>
<p>我们可以使用DROP INDEX命令删除表格中的索引。语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> INDEX index_name</span><br></pre></td></tr></table></figure>
<p>DROP TABLE 语句用于删除表（表的结构、属性以及索引也会被删除）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名称</span><br></pre></td></tr></table></figure>
<p>DROP DATABASE 语句用于删除数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE 数据库名称</span><br></pre></td></tr></table></figure>
<p>如果我们仅仅需要除去表内的数据，但并不删除表本身，那么我们该如何做呢？</p>
<p>请使用 TRUNCATE TABLE 命令（仅仅删除表格中的数据）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名称</span><br></pre></td></tr></table></figure>
<h2 id="SQL-ALTER-TABLE-修改表"><a href="#SQL-ALTER-TABLE-修改表" class="headerlink" title="SQL ALTER TABLE(修改表)"></a>SQL ALTER TABLE(修改表)</h2><p>ALTER TABLE 语句用于在已有的表中添加、修改或删除列。</p>
<h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><p>如果需要在表中添加列，请使用下列语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型</span><br></pre></td></tr></table></figure>
<p>也可以在添加列时给定一个默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型 <span class="keyword">DEFAULT</span> <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure>
<p>要删除表中的列，请使用下列语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名</span><br></pre></td></tr></table></figure>
<p>注释：某些数据库系统不允许这种在数据库表中删除列的方式 (DROP COLUMN column_name)。</p>
<p>要改变表中列的数据类型，请使用下列语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> column_name datatype</span><br></pre></td></tr></table></figure>
<p>Persons 表:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<h3 id="SQL-ALTER-TABLE-实例"><a href="#SQL-ALTER-TABLE-实例" class="headerlink" title="SQL ALTER TABLE 实例"></a>SQL ALTER TABLE 实例</h3><p>现在，我们希望在表 “Persons” 中添加一个名为 “Birthday” 的新列。</p>
<p>我们使用下列 SQL 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ADD Birthday date</span><br></pre></td></tr></table></figure>
<p>请注意，新列 “Birthday” 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。</p>
<p>新的 “Persons” 表类似这样：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
<th>Birthday</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<h3 id="改变数据类型实例"><a href="#改变数据类型实例" class="headerlink" title="改变数据类型实例"></a>改变数据类型实例</h3><p>现在我们希望改变 “Persons” 表中 “Birthday” 列的数据类型。</p>
<p>我们使用下列 SQL 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Persons</span><br><span class="line">ALTER COLUMN Birthday year</span><br></pre></td></tr></table></figure>
<p>请注意，”Birthday” 列的数据类型是 year，可以存放 2 位或 4 位格式的年份。</p>
<h3 id="DROP-COLUMN-实例"><a href="#DROP-COLUMN-实例" class="headerlink" title="DROP COLUMN 实例"></a>DROP COLUMN 实例</h3><p>接下来，我们删除 “Person” 表中的 “Birthday” 列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Person</span><br><span class="line">DROP COLUMN Birthday</span><br></pre></td></tr></table></figure>
<p>Persons 表会成为这样:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<h2 id="SQL-AUTO-INCREMENT-字段"><a href="#SQL-AUTO-INCREMENT-字段" class="headerlink" title="SQL AUTO INCREMENT 字段"></a>SQL AUTO INCREMENT 字段</h2><p>AUTO INCREMENT 会在新记录插入表中时生成一个唯一的数字。</p>
<p>我们通常希望在每次插入新记录时，自动的创建主键字段的值。</p>
<p>我们可以在表中创建一个auto-increment 字段。</p>
<p>eg：下列 SQL 语句把 “Persons” 表中的 “P_Id” 列定义为 auto-increment 主键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Persons</span><br><span class="line">(</span><br><span class="line">P_Id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">LastName varchar(255) NOT NULL,</span><br><span class="line">FirstName varchar(255),</span><br><span class="line">Address varchar(255),</span><br><span class="line">City varchar(255),</span><br><span class="line">PRIMARY KEY (P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>MySQL 使用 AUTO_INCREMENT 关键字来执行 auto-increment 任务。</p>
<p>默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。</p>
<p>要让 AUTO_INCREMENT 序列以其他的值起始，请使用下列 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>要在 “Persons” 表中插入新记录，我们不必为 “P_Id” 列规定值（会自动添加一个唯一的值）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO Persons (FirstName,LastName)</span><br><span class="line">VALUES (&#39;Bill&#39;,&#39;Gates&#39;)</span><br></pre></td></tr></table></figure>
<p>上面的 SQL 语句会在 “Persons” 表中插入一条新记录。”P_Id” 会被赋予一个唯一的值。”FirstName” 会被设置为 “Bill”，”LastName” 列会被设置为 “Gates”。</p>
<h2 id="SQL-VIEW（视图）"><a href="#SQL-VIEW（视图）" class="headerlink" title="SQL VIEW（视图）"></a>SQL VIEW（视图）</h2><p>视图是可视化的表。</p>
<p>在SQL中，视图是基于SQL语句的结果集的可视化的表。</p>
<p>就像是通过基于某些条件创建了一张新表，这张新表保存在数据库的view子目录下</p>
<p><img src="https://i.loli.net/2018/11/13/5bea9153a3a69.png" alt=""> </p>
<p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的表的真实字段。我们可以向视图添加SQL函数、WHERE以及JOIN语句，我们也可以提交数据，就像这些来自于某个单一的表。数据库的设计和结构不会受到视图中的函数、where或join语句的影响。</p>
<h3 id="SQL-CREATE-VIEW-语法"><a href="#SQL-CREATE-VIEW-语法" class="headerlink" title="SQL CREATE VIEW 语法"></a>SQL CREATE VIEW 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> <span class="keyword">SELECT</span> column_name(s) </span><br><span class="line"><span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure>
<p>视图总是显示最近的数据。每当用户查询视图是，数据库引擎通过使用SQL语句来重建数据。</p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>可以从某个查询内部、某个存储过程内部，或者从另一个视图内部来使用视图。通过向视图添加函数、join等等，我们可以向用户精确的提交我们希望提交的数据。</p>
<p>样本数据库Northwind 拥有一些被默认安装的视图。视图 “Current Product List” 会从 Products 表列出所有正在使用的产品。这个视图使用下列 SQL 创建：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product List] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductID,ProductName</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Discontinued<span class="operator">=</span><span class="keyword">No</span></span><br></pre></td></tr></table></figure>
<p>我们可以查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [<span class="keyword">Current</span> Prodect List]</span><br></pre></td></tr></table></figure>
<p>Northwind 样本数据库的另一个视图会选取 Products 表中所有单位价格高于平均单位价格的产品：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [Products Above Average Price] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductName,UnitPrice</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> UnitPrice<span class="operator">&gt;</span>(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(UnitPrice) <span class="keyword">FROM</span> Products) </span><br></pre></td></tr></table></figure>
<p>我们可以像这样查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [Products Above Average Price]</span><br></pre></td></tr></table></figure>
<p>另一个来自 Northwind 数据库的视图实例会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 “Product Sales for 1997” 的视图那里选取数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [Category Sales <span class="keyword">For</span> <span class="number">1997</span>] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CategoryName,<span class="built_in">Sum</span>(ProductSales) <span class="keyword">AS</span> CategorySales</span><br><span class="line"><span class="keyword">FROM</span> [Product Sales <span class="keyword">for</span> <span class="number">1997</span>]</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> CategoryName </span><br></pre></td></tr></table></figure>
<p>我们可以像这样查询上面这个视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [Category Sales <span class="keyword">For</span> <span class="number">1997</span>]</span><br></pre></td></tr></table></figure>
<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Beverages” 类的全部销量：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [Category Sales <span class="keyword">For</span> <span class="number">1997</span>]</span><br><span class="line"><span class="keyword">WHERE</span> CategoryName<span class="operator">=</span><span class="string">&#x27;Beverages&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="语法讲解："><a href="#语法讲解：" class="headerlink" title="语法讲解："></a>语法讲解：</h3><p>CREATE VIEW 创建视图 AS 根据条件 上面的条件是从Products表中查询ProductID,ProductName字段其实就是一个SQL查询语句，这个AS后面可以跟很多条件，比如我们可以使用join语句从两张表中查询某些字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> test <span class="keyword">AS</span> <span class="keyword">SELECT</span> 列名<span class="number">1</span>,列名<span class="number">2</span> <span class="keyword">FROM</span> 表名<span class="number">1</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表名<span class="number">2</span> <span class="keyword">ON</span> 条件</span><br><span class="line">#条件比如可以是表<span class="number">1.</span>列名<span class="number">1</span><span class="operator">=</span>表<span class="number">2.</span>列名<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="SQL-更新视图-好像没什么用"><a href="#SQL-更新视图-好像没什么用" class="headerlink" title="SQL 更新视图(好像没什么用)"></a>SQL 更新视图(好像没什么用)</h3><p>可以使用下面的语法来更新视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> Syntax</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> 视图名 <span class="keyword">AS</span> <span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure>
<p>现在，我们希望向 “Current Product List” 视图添加 “Category” 列。我们将通过下列 SQL 更新视图：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [<span class="keyword">Current</span> Product List] <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> ProductID,ProductName,Category</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br><span class="line"><span class="keyword">WHERE</span> Discontinued<span class="operator">=</span><span class="keyword">No</span></span><br></pre></td></tr></table></figure>
<h3 id="SQL-撤销视图"><a href="#SQL-撤销视图" class="headerlink" title="SQL 撤销视图"></a>SQL 撤销视图</h3><p>您可以通过 DROP VIEW 命令来删除视图。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span> <span class="keyword">DROP</span> <span class="keyword">VIEW</span> Syntax</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></figure>
<h2 id="SQL-DATE-时间、日期"><a href="#SQL-DATE-时间、日期" class="headerlink" title="SQL DATE(时间、日期)"></a>SQL DATE(时间、日期)</h2><p>当我们处理日期时，最难的任务恐怕是确保所插入的日期的格式，与数据库中日期列的格式相匹配。</p>
<p>只要数据包含的只是日期部分，运行查询就不会出问题。但是，如果涉及时间，情况就有点复杂了。</p>
<p>在讨论日期查询的复杂性之前，我们先来看看最重要的内建日期处理函数。</p>
<h3 id="Date函数"><a href="#Date函数" class="headerlink" title="Date函数"></a>Date函数</h3><p>下面的表格列出了 MySQL 中最重要的内建日期函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_now.asp">NOW()</a></td>
<td>返回当前的日期和时间</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_curdate.asp">CURDATE()</a></td>
<td>返回当前的日期</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_curtime.asp">CURTIME()</a></td>
<td>返回当前的时间</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_date.asp">DATE()</a></td>
<td>提取日期或日期/时间表达式的日期部分</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_extract.asp">EXTRACT()</a></td>
<td>返回日期/时间按的单独部分</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_date_add.asp">DATE_ADD()</a></td>
<td>给日期添加指定的时间间隔</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_date_sub.asp">DATE_SUB()</a></td>
<td>从日期减去指定的时间间隔</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_datediff_mysql.asp">DATEDIFF()</a></td>
<td>返回两个日期之间的天数</td>
</tr>
<tr>
<td><a href="http://www.w3school.com.cn/sql/func_date_format.asp">DATE_FORMAT()</a></td>
<td>用不同的格式显示日期/时间</td>
</tr>
</tbody>
</table>
<h3 id="SQL-Date数据类型"><a href="#SQL-Date数据类型" class="headerlink" title="SQL Date数据类型"></a>SQL Date数据类型</h3><p>MySQL 使用下列数据类型在数据库中存储日期或日期/时间值：</p>
<ul>
<li>DATE - 格式 YYYY-MM-DD</li>
<li>DATETIME - 格式: YYYY-MM-DD HH:MM:SS</li>
<li>TIMESTAMP - 格式: YYYY-MM-DD HH:MM:SS</li>
<li>YEAR - 格式 YYYY 或 YY</li>
</ul>
<h3 id="SQL-日期处理"><a href="#SQL-日期处理" class="headerlink" title="SQL 日期处理"></a>SQL 日期处理</h3><p>如果不涉及时间部分，那么我们可以轻松地比较两个日期！</p>
<p>假设我们有下面这个 “Orders” 表：</p>
<table>
<thead>
<tr>
<th>OrderId</th>
<th>ProductName</th>
<th>OrderDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>computer</td>
<td>2008-12-26</td>
</tr>
<tr>
<td>2</td>
<td>printer</td>
<td>2008-12-26</td>
</tr>
<tr>
<td>3</td>
<td>electrograph</td>
<td>2008-11-12</td>
</tr>
<tr>
<td>4</td>
<td>telephone</td>
<td>2008-10-19</td>
</tr>
</tbody>
</table>
<p>现在，我们希望从上表中选取 OrderDate 为 “2008-12-26” 的记录。</p>
<p>我们使用如下 SELECT 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM Orders WHERE OrderDate&#x3D;&#39;2008-12-26&#39;</span><br></pre></td></tr></table></figure>
<p>结果集：</p>
<table>
<thead>
<tr>
<th>OrderId</th>
<th>ProductName</th>
<th>OrderDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>computer</td>
<td>2008-12-26</td>
</tr>
<tr>
<td>3</td>
<td>electrograph</td>
<td>2008-12-26</td>
</tr>
</tbody>
</table>
<p>现在假设 “Orders” 类似这样（请注意 “OrderDate” 列中的时间部分）：</p>
<table>
<thead>
<tr>
<th>OrderId</th>
<th>ProductName</th>
<th>OrderDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>computer</td>
<td>2008-12-26 16:23:55</td>
</tr>
<tr>
<td>2</td>
<td>printer</td>
<td>2008-12-26 10:45:26</td>
</tr>
<tr>
<td>3</td>
<td>electrograph</td>
<td>2008-11-12 14:12:08</td>
</tr>
<tr>
<td>4</td>
<td>telephone</td>
<td>2008-10-19 12:56:10</td>
</tr>
</tbody>
</table>
<p>如果我们使用上面的 SELECT 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM Orders WHERE OrderDate&#x3D;&#39;2008-12-26&#39;</span><br></pre></td></tr></table></figure>
<p>那么我们得不到结果。这是由于该查询不含有时间部分的日期。</p>
<p>提示：如果您希望使查询简单且更易维护，那么请不要在日期中使用时间部分！</p>
<h2 id="SQL-NULL"><a href="#SQL-NULL" class="headerlink" title="SQL NULL"></a>SQL NULL</h2><p>NULL值是遗漏的未知数据。默认的表的列可以存放NULL值。</p>
<h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>如果表中的某个列是可选的，那么我们可以在不向该列添加值的情况下插入新纪录或更新现有的记录。这意味着该字段将以NULL值保存。</p>
<p>NULL值得处理方式与其他值不同。</p>
<p>NULL用作未知的或不是用的值得占位符。</p>
<p>注意：NULL值无法和0比较；他们是不等价的。</p>
<p>SQL 的 NULL值处理：</p>
<p>请看下面的 “Persons” 表：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td></td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td></td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>假如 “Persons” 表中的 “Address” 列是可选的。这意味着如果在 “Address” 列插入一条不带值的记录，”Address” 列会使用 NULL 值保存。</p>
<p>那么我们如何测试 NULL 值呢？</p>
<p>无法使用比较运算符来测试 NULL 值，比如 =, &lt;, 或者 &lt;&gt;。</p>
<p>我们必须使用 IS NULL 和 IS NOT NULL 操作符。</p>
<h3 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h3><p>我们如何仅仅选取在 “Address” 列中带有 NULL 值的记录呢？</p>
<p>我们必须使用 IS NULL 操作符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LastName,FirstName,Address FROM Persons</span><br><span class="line">WHERE Address IS NULL</span><br></pre></td></tr></table></figure>
<p>结果集：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adams</td>
<td>John</td>
<td></td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
</tr>
</tbody>
</table>
<p>提示：请始终使用 IS NULL 来查找 NULL 值。</p>
<h3 id="IS-NOT-NULL"><a href="#IS-NOT-NULL" class="headerlink" title="IS NOT NULL"></a>IS NOT NULL</h3><p>我们如何选取在 “Address” 列中不带有 NULL 值的记录呢？</p>
<p>我们必须使用 IS NOT NULL 操作符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT LastName,FirstName,Address FROM Persons</span><br><span class="line">WHERE Address IS NOT NULL</span><br></pre></td></tr></table></figure>
<p>结果集：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
</tr>
</tbody>
</table>
<h2 id="SQL-NULL函数"><a href="#SQL-NULL函数" class="headerlink" title="SQL NULL函数"></a>SQL NULL函数</h2><h3 id="SQL-ISNULL-、NVL-、IFNULL-和COALESCE-函数"><a href="#SQL-ISNULL-、NVL-、IFNULL-和COALESCE-函数" class="headerlink" title="SQL ISNULL()、NVL()、IFNULL()和COALESCE()函数"></a>SQL ISNULL()、NVL()、IFNULL()和COALESCE()函数</h3><p>请看下面的 “Products” 表：</p>
<table>
<thead>
<tr>
<th>P_Id</th>
<th>ProductName</th>
<th>UnitPrice</th>
<th>UnitsInStock</th>
<th>UnitsOnOrder</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>computer</td>
<td>699</td>
<td>25</td>
<td>15</td>
</tr>
<tr>
<td>2</td>
<td>printer</td>
<td>365</td>
<td>36</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>telephone</td>
<td>280</td>
<td>159</td>
<td>57</td>
</tr>
</tbody>
</table>
<p>假如 “UnitsOnOrder” 是可选的，而且可以包含 NULL 值。</p>
<p>我们使用如下 SELECT 语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT ProductName,UnitPrice*(UnitsInStock+UnitsOnOrder)</span><br><span class="line">FROM Products</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，如果有 “UnitsOnOrder” 值是 NULL，那么结果是 NULL。</p>
<p>微软的 ISNULL() 函数用于规定如何处理 NULL 值。</p>
<p>NVL(), IFNULL() 和 COALESCE() 函数也可以达到相同的结果。</p>
<p>在这里，我们希望 NULL 值为 0。</p>
<p>下面，如果 “UnitsOnOrder” 是 NULL，则不利于计算，因此如果值是 NULL 则 ISNULL() 返回 0。</p>
<p>SQL Server / MS Access</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName,UnitPrice<span class="operator">*</span>(UnitsInStock<span class="operator">+</span>ISNULL(UnitsOnOrder,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure>
<p>Oracle</p>
<p>Oracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName,UnitPrice<span class="operator">*</span>(UnitsInStock<span class="operator">+</span>NVL(UnitsOnOrder,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure>
<p>MySQL</p>
<p>MySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。</p>
<p>在 MySQL 中，我们可以使用 IFNULL() 函数，就像这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName,UnitPrice<span class="operator">*</span>(UnitsInStock<span class="operator">+</span>IFNULL(UnitsOnOrder,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure>
<p>或者我们可以使用 COALESCE() 函数，就像这样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ProductName,UnitPrice<span class="operator">*</span>(UnitsInStock<span class="operator">+</span><span class="built_in">COALESCE</span>(UnitsOnOrder,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> Products</span><br></pre></td></tr></table></figure>
<h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><p>在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。</p>
<h3 id="Text-类型："><a href="#Text-类型：" class="headerlink" title="Text 类型："></a>Text 类型：</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR(size)</td>
<td>保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td>
</tr>
<tr>
<td>VARCHAR(size)</td>
<td>保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。注释：如果值的长度大于 255，则被转换为 TEXT 类型。</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>存放最大长度为 255 个字符的字符串。</td>
</tr>
<tr>
<td>TEXT</td>
<td>存放最大长度为 65,535 个字符的字符串。</td>
</tr>
<tr>
<td>BLOB</td>
<td>用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>存放最大长度为 16,777,215 个字符的字符串。</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>存放最大长度为 4,294,967,295 个字符的字符串。</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td>
</tr>
<tr>
<td>ENUM(x,y,z,etc.)</td>
<td>允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。注释：这些值是按照你输入的顺序存储的。可以按照此格式输入可能的值：ENUM(‘X’,’Y’,’Z’)</td>
</tr>
<tr>
<td>SET</td>
<td>与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。</td>
</tr>
</tbody>
</table>
<h3 id="Number-类型："><a href="#Number-类型：" class="headerlink" title="Number 类型："></a>Number 类型：</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT(size)</td>
<td>-128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。</td>
</tr>
<tr>
<td>SMALLINT(size)</td>
<td>-32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。</td>
</tr>
<tr>
<td>MEDIUMINT(size)</td>
<td>-8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。</td>
</tr>
<tr>
<td>INT(size)</td>
<td>-2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。</td>
</tr>
<tr>
<td>BIGINT(size)</td>
<td>-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。</td>
</tr>
<tr>
<td>FLOAT(size,d)</td>
<td>带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>
</tr>
<tr>
<td>DOUBLE(size,d)</td>
<td>带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>
</tr>
<tr>
<td>DECIMAL(size,d)</td>
<td>作为字符串存储的 DOUBLE 类型，允许固定的小数点。</td>
</tr>
</tbody>
</table>
<p>* 这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。</p>
<h3 id="Date-类型："><a href="#Date-类型：" class="headerlink" title="Date 类型："></a>Date 类型：</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATE()</td>
<td>日期。格式：YYYY-MM-DD注释：支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’</td>
</tr>
<tr>
<td>DATETIME()</td>
<td>*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td>
</tr>
<tr>
<td>TIMESTAMP()</td>
<td>*时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS注释：支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC</td>
</tr>
<tr>
<td>TIME()</td>
<td>时间。格式：HH:MM:SS 注释：支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’</td>
</tr>
<tr>
<td>YEAR()</td>
<td>2 位或 4 位格式的年。注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。</td>
</tr>
</tbody>
</table>
<p>* 即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</p>
<hr>
<p>暂时先学习到这儿……</p>
<p><a href="http://www.w3school.com.cn/sql/sql_between.asp">学习</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
